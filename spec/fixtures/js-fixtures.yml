js:
  fixtures:
    foo.js:
      label: render() should return js-code as is
      source: return 8 / 2
      sameinput: true

    foo.es6.js:
      label: render() should return the transpiled es6-code as output
      source: "const foo = () => 'bar'"
      contain: "return 'bar';"

    foo.bar.js:
      label: render() should throws an error (unknown bar-engine)
      source: return 2 + 2
      throws: true

    foo.js.css:
      label: render() should return the same css-code as is
      source: ".hidden { display: none }"
      sameinput: true

    foo.js.html:
      label: render() should return the same html-code as is
      source: <some><invalid><markup>
      sameinput: true

    foo.js.jade:
      label: render() should return the executed jade-code as markup
      source: "div: span OK"
      contain: </div>
      validate: false

    foo.js.less:
      label: render() should return the executed less-code as css-code
      source: "a { &:hover { color: red } }"
      contain: "a:hover"
      missing: function
      validate: false

    foo.js.coffee:
      label: render() should return the transpiled coffee-code as output
      source: "test = -> 'str' + 'ing'"
      contain: "var test;"

    foo.js.litcoffee:
      label: render() should return the transpiled litcoffee-code as output
      source: |
        # title
            fun = ->
      contain: 'var fun;'

    foo.js.ract:
      label: render() should return the compiled ract-code as object
      source: "<div>{{stub}}</div>"
      typeof: object

    foo.js.hbs:
      label: render() should return the executed hbs-code as output
      source: "{{#stub}}OK{{/stub}}"
      missing: "Handlebars.template"
      validate: false

    foo.js.ejs:
      label: render() should return the executed ejs-code as output
      source: "<p><%= foo %></p>"
      contain: <p>bar</p>
      params:
        foo: bar

    foo.js.md:
      label: render() should throws an error (cannot compile md-to-js)
      source: "# A title"
      throws: true

    foo.js.json:
      label: render() should return the json-code as object
      source: "{ foo: 'bar' }"
      typeof: object
